name: Update IP Sets

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-ipsets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Remove Existing Dynamic lists
        run: |
          git rm -f ipsets/allowlists/dynamic/p1/*
          git rm -f ipsets/allowlists/dynamic/p2/*
          git rm -f ipsets/blocklists/dynamic/p1/*
          git rm -f ipsets/blocklists/dynamic/p2/*

      - name: Create required folders
        run: |
          mkdir -p ipsets/allowlists/dynamic/p1
          mkdir -p ipsets/allowlists/dynamic/p2
          mkdir -p ipsets/blocklists/dynamic/p1
          mkdir -p ipsets/blocklists/dynamic/p2
          mkdir -p combined

      - name: Download dynamic allowlists p1
        run: |
          mkdir -p ipsets/allowlists/dynamic/p1
          grep -v '^#' sources/allowlists-p1.txt | sort -u | while IFS= read -r url; do
            [[ -z "$url" ]] && continue
            filename=$(echo "$url" | sha256sum | awk '{print $1}')
            tmpfile=$(mktemp)
            if curl -fsSL "$url" -o "$tmpfile"; then
              mv "$tmpfile" "ipsets/allowlists/dynamic/p1/${filename}.ipset"
            else
              echo "[warn] Failed to download: $url" >&2
              rm -f "$tmpfile"
            fi
          done

      - name: Download dynamic allowlists p2
        run: |
          mkdir -p ipsets/allowlists/dynamic/p2
          grep -v '^#' sources/allowlists-p2.txt | sort -u | while IFS= read -r url; do
            [[ -z "$url" ]] && continue
            filename=$(echo "$url" | sha256sum | awk '{print $1}')
            tmpfile=$(mktemp)
            if curl -fsSL "$url" -o "$tmpfile"; then
              mv "$tmpfile" "ipsets/allowlists/dynamic/p2/${filename}.ipset"
            else
              echo "[warn] Failed to download: $url" >&2
              rm -f "$tmpfile"
            fi
          done

      - name: Download dynamic blocklists p1
        run: |
          mkdir -p ipsets/blocklists/dynamic/p1
          grep -v '^#' sources/blocklists-p1.txt | sort -u | while IFS= read -r url; do
            [[ -z "$url" ]] && continue
            filename=$(echo "$url" | sha256sum | awk '{print $1}')
            tmpfile=$(mktemp)
            if curl -fsSL "$url" -o "$tmpfile"; then
              mv "$tmpfile" "ipsets/blocklists/dynamic/p1/${filename}.ipset"
            else
              echo "[warn] Failed to download: $url" >&2
              rm -f "$tmpfile"
            fi
          done

      - name: Download dynamic blocklists p2
        run: |
          mkdir -p ipsets/blocklists/dynamic/p2
          grep -v '^#' sources/blocklists-p2.txt | sort -u | while IFS= read -r url; do
            [[ -z "$url" ]] && continue
            filename=$(echo "$url" | sha256sum | awk '{print $1}')
            tmpfile=$(mktemp)
            if curl -fsSL "$url" -o "$tmpfile"; then
              mv "$tmpfile" "ipsets/blocklists/dynamic/p2/${filename}.ipset"
            else
              echo "[warn] Failed to download: $url" >&2
              rm -f "$tmpfile"
            fi
          done

      - name: Combine all allowlists
        run: |
          cat ipsets/allowlists/static/static-allow.txt > combined/allowlist.txt
          find ipsets/allowlists/dynamic -type f -name '*.ipset' -exec cat {} + >> combined/allowlist.txt
          grep -v '^#' combined/allowlist.txt | sort -u > combined/allowlist.tmp
          mv combined/allowlist.tmp combined/allowlist.txt

      - name: Combine all blocklists
        run: |
          cat ipsets/blocklists/static/static-block.txt > combined/blocklist.txt
          find ipsets/blocklists/dynamic -type f -name '*.ipset' -exec cat {} + >> combined/blocklist.txt
          grep -v '^#' combined/blocklist.txt | sort -u > combined/blocklist.tmp
          mv combined/blocklist.tmp combined/blocklist.txt

      - name: Generate structured JSON
        run: |
          python3 <<EOF
          import os, json, hashlib, ipaddress

          def read_file_lines(path):
              return sorted(set(
                  line.strip() for line in open(path, 'r', encoding='utf-8')
                  if line.strip() and not line.strip().startswith('#')
              ))

          def merge_ip_ranges(ip_list):
              nets, invalid = [], []
              for ip in ip_list:
                  try:
                      nets.append(ipaddress.ip_network(ip, strict=False))
                  except ValueError:
                      invalid.append(ip)
              collapsed = ipaddress.collapse_addresses(nets)
              if invalid:
                  print(f"[warn] Skipped invalid entries: {invalid}")
              return sorted(str(net) for net in collapsed)

          def collect_dynamic(path):
              result = {}
              if not os.path.isdir(path): return result
              for file in os.listdir(path):
                  if not file.endswith(".ipset"):
                      continue
                  full_path = os.path.join(path, file)
                  result[file] = merge_ip_ranges(read_file_lines(full_path))
              return result

          data = {
              "allowlists": {
                  "static": merge_ip_ranges(read_file_lines("ipsets/allowlists/static/static-allow.txt")),
                  "dynamic": {
                      "p1": collect_dynamic("ipsets/allowlists/dynamic/p1"),
                      "p2": collect_dynamic("ipsets/allowlists/dynamic/p2")
                  }
              },
              "blocklists": {
                  "static": merge_ip_ranges(read_file_lines("ipsets/blocklists/static/static-block.txt")),
                  "dynamic": {
                      "p1": collect_dynamic("ipsets/blocklists/dynamic/p1"),
                      "p2": collect_dynamic("ipsets/blocklists/dynamic/p2")
                  }
              }
          }

          with open("combined/ipsets.json", "w", encoding="utf-8") as f:
              json.dump(data, f, indent=2)

          with open("combined/ipsets.json", "rb") as f:
              sha1 = hashlib.sha1(f.read()).hexdigest()
          with open("combined/ipsets.json.sha1", "w", encoding="utf-8") as f:
              f.write(sha1 + "\\n")
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add -A ipsets/allowlists/dynamic ipsets/blocklists/dynamic combined/
          git diff --cached --quiet || git commit -m "Update IP sets on $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push
