name: Update Dynamic IP Sets

on:
  schedule:
    #- cron: '0 1 * * *'  # Daily at 1 AM UTC
    - cron: '0 * * * *'  # Every hour at minute 0 (e.g., 01:00, 02:00, etc.)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-ipsets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create required folders
        run: |
          mkdir -p ipsets/allowlists/dynamic
          mkdir -p ipsets/blocklists/dynamic
          mkdir -p combined

      - name: Download dynamic allowlists
        run: |
          while IFS= read -r url || [[ -n "$url" ]]; do
            [[ -z "$url" || "$url" =~ ^# ]] && continue
            filename=$(echo "$url" | sha256sum | awk '{print $1}')
            curl -sSL "$url" -o "ipsets/allowlists/dynamic/${filename}.txt"
          done < sources/allowlists.txt

      - name: Download dynamic blocklists
        run: |
          while IFS= read -r url || [[ -n "$url" ]]; do
            [[ -z "$url" || "$url" =~ ^# ]] && continue
            filename=$(echo "$url" | sha256sum | awk '{print $1}')
            curl -sSL "$url" -o "ipsets/blocklists/dynamic/${filename}.txt"
          done < sources/blocklists.txt

      - name: Combine all allowlists
        run: |
          cat ipsets/allowlists/static/static-allow.txt > combined/allowlist.txt
          find ipsets/allowlists/dynamic -type f -exec cat {} + >> combined/allowlist.txt
          sort -u combined/allowlist.txt -o combined/allowlist.txt

      - name: Combine all blocklists
        run: |
          cat ipsets/blocklists/static/static-block.txt > combined/blocklist.txt
          find ipsets/blocklists/dynamic -type f -exec cat {} + >> combined/blocklist.txt
          sort -u combined/blocklist.txt -o combined/blocklist.txt

      - name: Generate structured JSON
        run: |
          python3 <<EOF
          import os
          import json
          import hashlib
          import ipaddress
          from datetime import datetime, timezone

          def read_file_lines(path):
              return sorted(set(
                  line.strip() for line in open(path, 'r', encoding='utf-8')
                  if line.strip() and not line.strip().startswith('#')
              ))

          def merge_ip_ranges(ip_list):
              nets = []
              invalid = []
              for ip in ip_list:
                  try:
                      net = ipaddress.ip_network(ip, strict=False)
                      nets.append(net)
                  except ValueError:
                      invalid.append(ip)
              collapsed = ipaddress.collapse_addresses(nets)
              if invalid:
                  print(f"[warn] Skipped invalid entries: {invalid}")
              return sorted(str(net) for net in collapsed)

          data = {
              "generated": datetime.now(timezone.utc).isoformat(),
              "allowlists": {
                  "static": [],
                  "dynamic": {}
              },
              "blocklists": {
                  "static": [],
                  "dynamic": {}
              }
          }

          # Read static lists
          data["allowlists"]["static"] = merge_ip_ranges(read_file_lines("ipsets/allowlists/static/static-allow.txt"))
          data["blocklists"]["static"] = merge_ip_ranges(read_file_lines("ipsets/blocklists/static/static-block.txt"))

          # Read dynamic lists
          for file in os.listdir("ipsets/allowlists/dynamic"):
              path = f"ipsets/allowlists/dynamic/{file}"
              data["allowlists"]["dynamic"][file] = merge_ip_ranges(read_file_lines(path))

          for file in os.listdir("ipsets/blocklists/dynamic"):
              path = f"ipsets/blocklists/dynamic/{file}"
              data["blocklists"]["dynamic"][file] = merge_ip_ranges(read_file_lines(path))

          # Write JSON
          json_path = "combined/ipsets.json"
          with open(json_path, "w", encoding="utf-8") as f:
              json.dump(data, f, indent=2)

          # Write SHA1
          with open(json_path, "rb") as f:
              sha1 = hashlib.sha1(f.read()).hexdigest()
          with open(json_path + ".sha1", "w", encoding="utf-8") as f:
              f.write(sha1 + "\n")
          EOF

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add ipsets/allowlists/dynamic/*.txt ipsets/blocklists/dynamic/*.txt combined/
          git diff --cached --quiet || git commit -m "Update IP sets on $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          git push
